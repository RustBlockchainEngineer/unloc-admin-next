/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export type SetVotingInstructionArgs = {
  votingPid: web3.PublicKey
  voting: web3.PublicKey
}
/**
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export const setVotingStruct = new beet.BeetArgsStruct<
  SetVotingInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['votingPid', beetSolana.publicKey],
    ['voting', beetSolana.publicKey],
  ],
  'SetVotingInstructionArgs'
)
/**
 * Accounts required by the _setVoting_ instruction
 *
 * @property [_writable_, **signer**] superOwner
 * @property [_writable_] globalState
 * @property [_writable_] rewardVault
 * @property [] chainlinkProgram
 * @property [] solFeed
 * @property [] usdcFeed
 * @property [] clock
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export type SetVotingInstructionAccounts = {
  superOwner: web3.PublicKey
  globalState: web3.PublicKey
  rewardVault: web3.PublicKey
  chainlinkProgram: web3.PublicKey
  solFeed: web3.PublicKey
  usdcFeed: web3.PublicKey
  clock: web3.PublicKey
}

export const setVotingInstructionDiscriminator = [
  68, 253, 54, 220, 235, 124, 126, 62,
]

/**
 * Creates a _SetVoting_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export function createSetVotingInstruction(
  accounts: SetVotingInstructionAccounts,
  args: SetVotingInstructionArgs
) {
  const {
    superOwner,
    globalState,
    rewardVault,
    chainlinkProgram,
    solFeed,
    usdcFeed,
    clock,
  } = accounts

  const [data] = setVotingStruct.serialize({
    instructionDiscriminator: setVotingInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: superOwner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: globalState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: chainlinkProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: solFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: usdcFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh'
    ),
    keys,
    data,
  })
  return ix
}

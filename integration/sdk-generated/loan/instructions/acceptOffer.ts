/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AcceptOffer
 * @category generated
 */
export const acceptOfferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'AcceptOfferInstructionArgs'
)
/**
 * Accounts required by the _acceptOffer_ instruction
 *
 * @property [_writable_, **signer**] lender
 * @property [_writable_] borrower
 * @property [_writable_] globalState
 * @property [_writable_] offer
 * @property [_writable_] subOffer
 * @property [_writable_] offerMint
 * @property [_writable_] borrowerOfferVault
 * @property [_writable_] lenderOfferVault
 * @property [] chainlinkProgram
 * @property [] solFeed
 * @property [] usdcFeed
 * @property [] rewardVault
 * @property [] clock
 * @category Instructions
 * @category AcceptOffer
 * @category generated
 */
export type AcceptOfferInstructionAccounts = {
  lender: web3.PublicKey
  borrower: web3.PublicKey
  globalState: web3.PublicKey
  offer: web3.PublicKey
  subOffer: web3.PublicKey
  offerMint: web3.PublicKey
  borrowerOfferVault: web3.PublicKey
  lenderOfferVault: web3.PublicKey
  chainlinkProgram: web3.PublicKey
  solFeed: web3.PublicKey
  usdcFeed: web3.PublicKey
  rewardVault: web3.PublicKey
  clock: web3.PublicKey
}

export const acceptOfferInstructionDiscriminator = [
  227, 82, 234, 131, 1, 18, 48, 2,
]

/**
 * Creates a _AcceptOffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category AcceptOffer
 * @category generated
 */
export function createAcceptOfferInstruction(
  accounts: AcceptOfferInstructionAccounts
) {
  const {
    lender,
    borrower,
    globalState,
    offer,
    subOffer,
    offerMint,
    borrowerOfferVault,
    lenderOfferVault,
    chainlinkProgram,
    solFeed,
    usdcFeed,
    rewardVault,
    clock,
  } = accounts

  const [data] = acceptOfferStruct.serialize({
    instructionDiscriminator: acceptOfferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: lender,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: borrower,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: globalState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: subOffer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: offerMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: borrowerOfferVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: lenderOfferVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: chainlinkProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: solFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: usdcFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: rewardVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh'
    ),
    keys,
    data,
  })
  return ix
}

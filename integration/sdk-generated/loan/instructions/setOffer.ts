/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SetOffer
 * @category generated
 */
export const setOfferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'SetOfferInstructionArgs'
)
/**
 * Accounts required by the _setOffer_ instruction
 *
 * @property [_writable_, **signer**] borrower
 * @property [_writable_] offer
 * @property [] nftMint
 * @property [] nftMetadata
 * @property [_writable_] userVault
 * @property [] edition
 * @property [] metadataProgram
 * @property [] clock
 * @category Instructions
 * @category SetOffer
 * @category generated
 */
export type SetOfferInstructionAccounts = {
  borrower: web3.PublicKey
  offer: web3.PublicKey
  nftMint: web3.PublicKey
  nftMetadata: web3.PublicKey
  userVault: web3.PublicKey
  edition: web3.PublicKey
  metadataProgram: web3.PublicKey
  clock: web3.PublicKey
}

export const setOfferInstructionDiscriminator = [
  230, 220, 7, 113, 40, 254, 223, 140,
]

/**
 * Creates a _SetOffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category SetOffer
 * @category generated
 */
export function createSetOfferInstruction(
  accounts: SetOfferInstructionAccounts
) {
  const {
    borrower,
    offer,
    nftMint,
    nftMetadata,
    userVault,
    edition,
    metadataProgram,
    clock,
  } = accounts

  const [data] = setOfferStruct.serialize({
    instructionDiscriminator: setOfferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: borrower,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: nftMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: nftMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: userVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: edition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh'
    ),
    keys,
    data,
  })
  return ix
}

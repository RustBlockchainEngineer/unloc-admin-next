/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SetGlobalState
 * @category generated
 */
export type SetGlobalStateInstructionArgs = {
  accruedInterestNumerator: beet.bignum
  denominator: beet.bignum
  minRepaidNumerator: beet.bignum
  aprNumerator: beet.bignum
  expireLoanDuration: beet.bignum
  rewardRate: beet.bignum
  lenderRewardsPercentage: beet.bignum
}
/**
 * @category Instructions
 * @category SetGlobalState
 * @category generated
 */
export const setGlobalStateStruct = new beet.BeetArgsStruct<
  SetGlobalStateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['accruedInterestNumerator', beet.u64],
    ['denominator', beet.u64],
    ['minRepaidNumerator', beet.u64],
    ['aprNumerator', beet.u64],
    ['expireLoanDuration', beet.u64],
    ['rewardRate', beet.u64],
    ['lenderRewardsPercentage', beet.u64],
  ],
  'SetGlobalStateInstructionArgs'
)
/**
 * Accounts required by the _setGlobalState_ instruction
 *
 * @property [_writable_, **signer**] superOwner
 * @property [_writable_] globalState
 * @property [] rewardMint
 * @property [_writable_] rewardVault
 * @property [] newSuperOwner
 * @property [] treasuryWallet
 * @property [] clock
 * @category Instructions
 * @category SetGlobalState
 * @category generated
 */
export type SetGlobalStateInstructionAccounts = {
  superOwner: web3.PublicKey
  globalState: web3.PublicKey
  rewardMint: web3.PublicKey
  rewardVault: web3.PublicKey
  newSuperOwner: web3.PublicKey
  treasuryWallet: web3.PublicKey
  clock: web3.PublicKey
}

export const setGlobalStateInstructionDiscriminator = [
  122, 114, 14, 244, 175, 193, 8, 179,
]

/**
 * Creates a _SetGlobalState_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetGlobalState
 * @category generated
 */
export function createSetGlobalStateInstruction(
  accounts: SetGlobalStateInstructionAccounts,
  args: SetGlobalStateInstructionArgs
) {
  const {
    superOwner,
    globalState,
    rewardMint,
    rewardVault,
    newSuperOwner,
    treasuryWallet,
    clock,
  } = accounts

  const [data] = setGlobalStateStruct.serialize({
    instructionDiscriminator: setGlobalStateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: superOwner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: globalState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: rewardMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: newSuperOwner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: treasuryWallet,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh'
    ),
    keys,
    data,
  })
  return ix
}

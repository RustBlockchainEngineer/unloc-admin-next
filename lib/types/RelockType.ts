/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link RelockType} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link RelockType} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type RelockTypeRecord = {
  FlexiStakingData: void /* scalar variant */
  LiqMining: void /* scalar variant */
  LockedTokens: { fields: [number] }
}

/**
 * Union type respresenting the RelockType data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isRelockType*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type RelockType = beet.DataEnumKeyAsKind<RelockTypeRecord>

export const isRelockTypeFlexiStakingData = (
  x: RelockType
): x is RelockType & { __kind: 'FlexiStakingData' } =>
  x.__kind === 'FlexiStakingData'
export const isRelockTypeLiqMining = (
  x: RelockType
): x is RelockType & { __kind: 'LiqMining' } => x.__kind === 'LiqMining'
export const isRelockTypeLockedTokens = (
  x: RelockType
): x is RelockType & { __kind: 'LockedTokens' } => x.__kind === 'LockedTokens'

/**
 * @category userTypes
 * @category generated
 */
export const relockTypeBeet = beet.dataEnum<RelockTypeRecord>([
  ['FlexiStakingData', beet.unit],
  ['LiqMining', beet.unit],
  [
    'LockedTokens',
    new beet.BeetArgsStruct<RelockTypeRecord['LockedTokens']>(
      [['fields', beet.fixedSizeTuple([beet.u16])]],
      'RelockTypeRecord["LockedTokens"]'
    ),
  ],
]) as beet.FixableBeet<RelockType>

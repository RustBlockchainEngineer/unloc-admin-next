/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FundRewardsVault
 * @category generated
 */
export type FundRewardsVaultInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category FundRewardsVault
 * @category generated
 */
export const fundRewardsVaultStruct = new beet.BeetArgsStruct<
  FundRewardsVaultInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'FundRewardsVaultInstructionArgs'
)
/**
 * Accounts required by the _fundRewardsVault_ instruction
 *
 * @property [_writable_] poolInfo
 * @property [_writable_] stakingVault
 * @property [_writable_] rewardsVault
 * @property [_writable_] tokenMint
 * @property [**signer**] funder
 * @property [_writable_] funderTokenAccountToDebit
 * @category Instructions
 * @category FundRewardsVault
 * @category generated
 */
export type FundRewardsVaultInstructionAccounts = {
  poolInfo: web3.PublicKey
  stakingVault: web3.PublicKey
  rewardsVault: web3.PublicKey
  tokenMint: web3.PublicKey
  funder: web3.PublicKey
  funderTokenAccountToDebit: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const fundRewardsVaultInstructionDiscriminator = [
  157, 74, 89, 172, 187, 7, 119, 161,
]

/**
 * Creates a _FundRewardsVault_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category FundRewardsVault
 * @category generated
 */
export function createFundRewardsVaultInstruction(
  accounts: FundRewardsVaultInstructionAccounts,
  args: FundRewardsVaultInstructionArgs,
  programId = new web3.PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = fundRewardsVaultStruct.serialize({
    instructionDiscriminator: fundRewardsVaultInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.poolInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakingVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardsVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.funder,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.funderTokenAccountToDebit,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

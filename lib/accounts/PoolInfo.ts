/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  InterestRateFraction,
  interestRateFractionBeet,
} from '../types/InterestRateFraction'
import { ScoreMultiplier, scoreMultiplierBeet } from '../types/ScoreMultiplier'
import {
  FeeReductionLevels,
  feeReductionLevelsBeet,
} from '../types/FeeReductionLevels'
import { PoolStats, poolStatsBeet } from '../types/PoolStats'

/**
 * Arguments used to create {@link PoolInfo}
 * @category Accounts
 * @category generated
 */
export type PoolInfoArgs = {
  numAuthorities: number
  authorityWallets: web3.PublicKey[]
  numApprovalsNeededForUpdate: number
  stakingVault: web3.PublicKey
  rewardsVault: web3.PublicKey
  tokenMint: web3.PublicKey
  interestRateFraction: InterestRateFraction
  scoreMultiplier: ScoreMultiplier
  profileLevelMultiplier: FeeReductionLevels
  unstakePenalityBasisPoints: beet.bignum
  penalityDepositVault: web3.PublicKey
  paused: boolean
  bump: number[] /* size: 1 */
  poolStats: PoolStats
  reservedPadding: number[] /* size: 32 */
}

export const poolInfoDiscriminator = [18, 19, 191, 60, 244, 139, 177, 235]
/**
 * Holds the data for the {@link PoolInfo} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PoolInfo implements PoolInfoArgs {
  private constructor(
    readonly numAuthorities: number,
    readonly authorityWallets: web3.PublicKey[],
    readonly numApprovalsNeededForUpdate: number,
    readonly stakingVault: web3.PublicKey,
    readonly rewardsVault: web3.PublicKey,
    readonly tokenMint: web3.PublicKey,
    readonly interestRateFraction: InterestRateFraction,
    readonly scoreMultiplier: ScoreMultiplier,
    readonly profileLevelMultiplier: FeeReductionLevels,
    readonly unstakePenalityBasisPoints: beet.bignum,
    readonly penalityDepositVault: web3.PublicKey,
    readonly paused: boolean,
    readonly bump: number[] /* size: 1 */,
    readonly poolStats: PoolStats,
    readonly reservedPadding: number[] /* size: 32 */
  ) {}

  /**
   * Creates a {@link PoolInfo} instance from the provided args.
   */
  static fromArgs(args: PoolInfoArgs) {
    return new PoolInfo(
      args.numAuthorities,
      args.authorityWallets,
      args.numApprovalsNeededForUpdate,
      args.stakingVault,
      args.rewardsVault,
      args.tokenMint,
      args.interestRateFraction,
      args.scoreMultiplier,
      args.profileLevelMultiplier,
      args.unstakePenalityBasisPoints,
      args.penalityDepositVault,
      args.paused,
      args.bump,
      args.poolStats,
      args.reservedPadding
    )
  }

  /**
   * Deserializes the {@link PoolInfo} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [PoolInfo, number] {
    return PoolInfo.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PoolInfo} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<PoolInfo> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find PoolInfo account at ${address}`)
    }
    return PoolInfo.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, poolInfoBeet)
  }

  /**
   * Deserializes the {@link PoolInfo} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PoolInfo, number] {
    return poolInfoBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link PoolInfo} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return poolInfoBeet.serialize({
      accountDiscriminator: poolInfoDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PoolInfo} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: PoolInfoArgs) {
    const instance = PoolInfo.fromArgs(args)
    return poolInfoBeet.toFixedFromValue({
      accountDiscriminator: poolInfoDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PoolInfo} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: PoolInfoArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      PoolInfo.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link PoolInfo} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      numAuthorities: this.numAuthorities,
      authorityWallets: this.authorityWallets,
      numApprovalsNeededForUpdate: this.numApprovalsNeededForUpdate,
      stakingVault: this.stakingVault.toBase58(),
      rewardsVault: this.rewardsVault.toBase58(),
      tokenMint: this.tokenMint.toBase58(),
      interestRateFraction: this.interestRateFraction,
      scoreMultiplier: this.scoreMultiplier,
      profileLevelMultiplier: this.profileLevelMultiplier,
      unstakePenalityBasisPoints: (() => {
        const x = <{ toNumber: () => number }>this.unstakePenalityBasisPoints
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      penalityDepositVault: this.penalityDepositVault.toBase58(),
      paused: this.paused,
      bump: this.bump,
      poolStats: this.poolStats,
      reservedPadding: this.reservedPadding,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const poolInfoBeet = new beet.FixableBeetStruct<
  PoolInfo,
  PoolInfoArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['numAuthorities', beet.u8],
    ['authorityWallets', beet.array(beetSolana.publicKey)],
    ['numApprovalsNeededForUpdate', beet.u8],
    ['stakingVault', beetSolana.publicKey],
    ['rewardsVault', beetSolana.publicKey],
    ['tokenMint', beetSolana.publicKey],
    ['interestRateFraction', interestRateFractionBeet],
    ['scoreMultiplier', scoreMultiplierBeet],
    ['profileLevelMultiplier', feeReductionLevelsBeet],
    ['unstakePenalityBasisPoints', beet.u128],
    ['penalityDepositVault', beetSolana.publicKey],
    ['paused', beet.bool],
    ['bump', beet.uniformFixedSizeArray(beet.u8, 1)],
    ['poolStats', poolStatsBeet],
    ['reservedPadding', beet.uniformFixedSizeArray(beet.u32, 32)],
  ],
  PoolInfo.fromArgs,
  'PoolInfo'
)
